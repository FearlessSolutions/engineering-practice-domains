// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/sample/microsvc/features/sample (interfaces: GreetingReader,GreetingWriter,Core)
//
// Generated by this command:
//
//	mockgen -destination ./logic_mocks.go -package sample . GreetingReader,GreetingWriter,Core
//
// Package sample is a generated GoMock package.
package sample

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGreetingReader is a mock of GreetingReader interface.
type MockGreetingReader struct {
	ctrl     *gomock.Controller
	recorder *MockGreetingReaderMockRecorder
}

// MockGreetingReaderMockRecorder is the mock recorder for MockGreetingReader.
type MockGreetingReaderMockRecorder struct {
	mock *MockGreetingReader
}

// NewMockGreetingReader creates a new mock instance.
func NewMockGreetingReader(ctrl *gomock.Controller) *MockGreetingReader {
	mock := &MockGreetingReader{ctrl: ctrl}
	mock.recorder = &MockGreetingReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreetingReader) EXPECT() *MockGreetingReaderMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockGreetingReader) List(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGreetingReaderMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGreetingReader)(nil).List), arg0)
}

// RandomGreeting mocks base method.
func (m *MockGreetingReader) RandomGreeting(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomGreeting", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RandomGreeting indicates an expected call of RandomGreeting.
func (mr *MockGreetingReaderMockRecorder) RandomGreeting(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomGreeting", reflect.TypeOf((*MockGreetingReader)(nil).RandomGreeting), arg0)
}

// MockGreetingWriter is a mock of GreetingWriter interface.
type MockGreetingWriter struct {
	ctrl     *gomock.Controller
	recorder *MockGreetingWriterMockRecorder
}

// MockGreetingWriterMockRecorder is the mock recorder for MockGreetingWriter.
type MockGreetingWriterMockRecorder struct {
	mock *MockGreetingWriter
}

// NewMockGreetingWriter creates a new mock instance.
func NewMockGreetingWriter(ctrl *gomock.Controller) *MockGreetingWriter {
	mock := &MockGreetingWriter{ctrl: ctrl}
	mock.recorder = &MockGreetingWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreetingWriter) EXPECT() *MockGreetingWriterMockRecorder {
	return m.recorder
}

// AddGreeting mocks base method.
func (m *MockGreetingWriter) AddGreeting(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGreeting", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGreeting indicates an expected call of AddGreeting.
func (mr *MockGreetingWriterMockRecorder) AddGreeting(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGreeting", reflect.TypeOf((*MockGreetingWriter)(nil).AddGreeting), arg0, arg1)
}

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// AddGreeting mocks base method.
func (m *MockCore) AddGreeting(arg0 context.Context, arg1 string, arg2 GreetingReader, arg3 GreetingWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGreeting", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGreeting indicates an expected call of AddGreeting.
func (mr *MockCoreMockRecorder) AddGreeting(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGreeting", reflect.TypeOf((*MockCore)(nil).AddGreeting), arg0, arg1, arg2, arg3)
}

// GiveGreeting mocks base method.
func (m *MockCore) GiveGreeting(arg0 context.Context, arg1 string, arg2 GreetingReader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveGreeting", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GiveGreeting indicates an expected call of GiveGreeting.
func (mr *MockCoreMockRecorder) GiveGreeting(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveGreeting", reflect.TypeOf((*MockCore)(nil).GiveGreeting), arg0, arg1, arg2)
}
